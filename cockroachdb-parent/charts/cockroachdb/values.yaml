# Generated file, DO NOT EDIT. Source: build/templates/cockroachdb-parent/charts/cockroachdb/values.yaml
# Default values for the cockroachdb chart.

# cockroachdb encapsulates the configuration for the CockroachDB cluster.
cockroachdb:
  # clusterDomain specifies the default DNS domain for the cluster.
  # This value should be updated if a different DNS domain is used for CockroachDB node discovery to work.
  clusterDomain: cluster.local
  # tls captures the security configuration for the CockroachDB cluster.
  tls:
    # enabled determines whether TLS is enabled for the CockroachDB cluster.
    enabled: true
    # selfSigner captures the configuration for generating self-signed certificates for the CockroachDB cluster.
    selfSigner:
      # enabled determines whether self-signed certificates are generated for the CockroachDB cluster.
      enabled: true
      # securityContext captures the pod-level security settings for the self-signer job.
      securityContext:
        # enabled determines whether the security context is applied to self-signer pods.
        enabled: true
      # caProvided indicates whether the user provides the CA certificate.
      caProvided: false
      # caSecret defines the name of the secret that contains the CA certificate.
      # If caProvided is true, this cannot be empty.
      caSecret: ""
      # minimumCertDuration specifies the minimum duration for all certificates.
      minimumCertDuration: 624h
      # caCertDuration specifies the duration for the CA certificate.
      caCertDuration: 43800h
      # caCertExpiryWindow specifies the rotation window before CA certificate expiry.
      caCertExpiryWindow: 648h
      # clientCertDuration specifies the duration for client certificates.
      clientCertDuration: 672h
      # clientCertExpiryWindow specifies the rotation window before client certificate expiry.
      clientCertExpiryWindow: 48h
      # nodeCertDuration specifies the duration for node certificates.
      nodeCertDuration: 8760h
      # nodeCertExpiryWindow specifies the rotation window before node certificate expiry.
      nodeCertExpiryWindow: 168h
      # rotateCerts determines whether certificates are rotated before expiry.
      rotateCerts: true
      # readinessWait specifies the wait time for each replica to become ready after starting.
      # Only considered when rotateCerts is true.
      readinessWait: 30s
      # podUpdateTimeout specifies the timeout for pods to reach the running state.
      # Only considered when rotateCerts is true.
      podUpdateTimeout: 2m
      # svcAccountAnnotations defines annotations for the ServiceAccount used by the self-signer job.
      svcAccountAnnotations: {}
      # labels defines additional labels for pods of the self-signer job.
      labels: {}
      # annotations defines additional annotations for pods of the self-signer job.
      annotations: {}
      # affinity captures the pod scheduling affinity rules for the self-signer job.
      # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
      affinity: {}
      # nodeSelector captures the node selector rules for pods of the self-signer job.
      # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      nodeSelector: {}
      # tolerations captures the tolerations for pods of the self-signer job.
      # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []
      # image captures the container image settings for the self-signer job.
      image:
        # repository defines the image repository for the self-signer container.
        repository: cockroachlabs-helm-charts/cockroach-self-signer-cert
        # tag defines the image tag for the self-signer container.
        tag: "1.8"
        # pullPolicy defines the image pull policy for the self-signer container.
        pullPolicy: IfNotPresent
        # registry defines the container registry host (e.g., gcr.io, docker.io).
        registry: gcr.io
        # credentials captures the image pull credentials for private registries.
        credentials: {}
          # registry defines the image registry for pulling images.
          # registry: gcr.io
          # username defines the username for accessing the image registry.
          # username: john_doe
          # password defines the password for accessing the image registry.
          # password: changeme
    # certManager uses cert-manager to manage certificate issuance for the CockroachDB cluster.
    certManager:
      # enabled determines whether cert-manager is used to issue certificates.
      enabled: false
      # caConfigMap defines the configmap name that contains the CA certificate.
      caConfigMap: cockroachdb-ca
      # nodeSecret defines the secret name that contains the node certificate.
      nodeSecret: cockroachdb-node
      # clientRootSecret defines the secret name that contains the root client certificate.
      clientRootSecret: cockroachdb-root
      # issuer specifies the Issuer or ClusterIssuer resource to use for issuing node and client certificates.
      # The values correspond to the issuerRef in the certificate.
      issuer:
        # group specifies the API group of the Issuer resource.
        group: cert-manager.io
        # kind specifies the kind of the Issuer resource.
        kind: Issuer
        # name specifies the name of the Issuer resource.
        name: cockroachdb
        # clientCertDuration specifies the duration of client certificates.
        clientCertDuration: 672h
        # clientCertExpiryWindow specifies the rotation window before client certificate expiry.
        clientCertExpiryWindow: 48h
        # nodeCertDuration specifies the duration for node certificates.
        nodeCertDuration: 8760h
        # nodeCertExpiryWindow specifies the rotation window before node certificate expiry.
        nodeCertExpiryWindow: 168h
    # externalCertificates captures the configuration for using external certificates.
    externalCertificates:
      # enabled determines whether external certificates are used.
      enabled: false
      # certificates captures the map of external certificates for the CockroachDB cluster.
      # https://www.cockroachlabs.com/docs/stable/authentication.html#client-authentication
      certificates: {}
        # caConfigMapName defines the name of a Kubernetes ConfigMap containing a ca.crt entry used to sign other external certificates.
        # This is used to validate the node and client certificates.
        # caConfigMapName: ""
        #
        # nodeCaConfigMapName defines the name of a Kubernetes ConfigMap containing a ca.crt entry used as the CA for node authentication.
        # If caConfigMapName is set, this should not be set.
        # This should only be set if using split CA certificates, which is not recommended:
        # https://www.cockroachlabs.com/docs/stable/authentication.html#using-split-ca-certificates.
        # If set, then clientCaConfigMapName must also be set.
        # nodeCaConfigMapName: ""
        #
        # clientCaConfigMapName defines the name of a Kubernetes ConfigMap containing a ca.crt entry used as the CA for client authentication.
        # If caConfigMapName is set, this should not be set.
        # This should only be set if using split CA certificates, which is not recommended:
        # https://www.cockroachlabs.com/docs/stable/authentication.html#using-split-ca-certificates.
        # If set, then nodeCaConfigMapName must also be set.
        # clientCaConfigMapName: ""
        #
        # nodeClientSecretName defines the name of a Kubernetes TLS secret holding client certificates used when establishing connections to other nodes in the cluster.
        # The certificate must be signed with the CA identified by caConfigMapName, or clientCaConfigMapName if using split CA certificates.
        # nodeClientSecretName: ""
        #
        # nodeSecretName defines the name of a Kubernetes TLS Secret holding node certificates used for receiving incoming node connections.
        # The certificate must be signed with the CA identified by caConfigMapName, or nodeCaConfigMapName if using split CA certificates.
        # nodeSecretName: ""
        #
        # rootSqlClientSecretName defines the name of the TLS secret holding client certificates for the root SQL user.
        # It allows the operator to perform various administrative actions (e.g., set cluster settings).
        # The certificate must be signed with the CA identified by caConfigMapName, or clientCaConfigMapName if using split CA certificates.
        # rootSqlClientSecretName: ""
        #
        # httpSecretName defines the name of a Kubernetes TLS Secret used for the HTTP service.
        # httpSecretName: ""
        #
  # crdbCluster captures the configuration for the CrdbCluster custom resource.
  crdbCluster:
    # image captures the container image settings for CockroachDB nodes.
    image:
      # name defines the CockroachDB container image.
      name: cockroachdb/cockroach:v25.2.1
      # pullPolicy defines the image pull policy for CockroachDB.
      pullPolicy: IfNotPresent
      # registry defines the container registry host (e.g., gcr.io, docker.io).
      # registry: docker.io
      # credentials captures the image pull credentials for private registries.
      credentials: {}
        # registry defines the image registry for pulling images.
        # registry: gcr.io
        # username defines the username for accessing the image registry.
        # username: john_doe
        # password defines the password for accessing the image registry.
        # password: changeme
    # clusterSettings captures the map of cluster settings to apply to the CockroachDB cluster.
    # https://www.cockroachlabs.com/docs/stable/cluster-settings.html
    clusterSettings: ~
    # timestamp captures the annotation timestamp used for rolling restarts.
    timestamp: "2021-10-18T00:00:00Z"
    # join captures the list of comma-separated addresses for joining an existing cluster.
    # Each item should be a resolvable FQDN (with port if needed).
    join: ""
    # resources captures the resource requests and limits for CockroachDB pods.
    resources: ~
      # limits:
      #   cpu: 4000m
      #   memory: 16Gi
      # requests:
      #   cpu: 4000m
      #   memory: 16Gi
    # dataStore captures the disk configuration for CockroachDB storage.
    dataStore:
      # volumeClaimTemplate captures the PVC template for storage.
      volumeClaimTemplate:
        metadata: {}
        spec:
          # accessModes defines the access modes for the PVC.
          accessModes:
            - ReadWriteOnce
          # resources captures resource requests for the PVC.
          resources:
            requests:
              # storage defines the storage request size.
              storage: 10Gi
          # volumeMode specifies the volume mode for the PVC.
          volumeMode: Filesystem
          # storageClassName defines the StorageClass for the PVC.
          # If not set, the default provisioner will be chosen (gp2 on AWS, standard on GKE).
          # storageClassName: ""
    # rbac captures the RBAC settings for CockroachDB pods.
    rbac:
      # serviceAccount captures settings for the CockroachDB ServiceAccount.
      serviceAccount:
        # create determines whether a new ServiceAccount is created.
        # By default, the ServiceAccount name will be the fully qualified app name.
        create: true
        # name defines the name of the ServiceAccount.
        # If create is false, this value is used as the name of the ServiceAccount.
        name: ""
        # annotations captures additional annotations for the ServiceAccount.
        annotations: {}
      # rules captures the namespaced RBAC rules bound to the ServiceAccount.
      # For example:
      #
      # rules:
      #   - apiGroup: [""]
      #     resources: ["secrets"]
      #     verbs: ["create", "get"]
      rules: []
      # clusterRules captures the cluster-level RBAC rules for the ServiceAccount.
      clusterRules:
        # Get nodes allows to pull the labels to determine node locality.
        - apiGroups: [ "" ]
          resources: [ "nodes" ]
          verbs: [ "get" ]
    # regions captures the configuration of CockroachDB nodes per region.
    regions:
        # code corresponds to the cloud provider's identifier for this region (e.g., "us-east-1" for AWS, "us-east1" for GCP).
        # This value is used to detect the region to be reconciled and must match the "topology.kubernetes.io/region" label (if it exists) on Kubernetes nodes in this cluster.
        # This value should match the operator's cloudRegion configuration.
      - code: us-east1
        # nodes defines the number of CockroachDB nodes in this region.
        nodes: 3
        # cloudProvider specifies the cloud platform identifier.
        # Supported values are "aws", "gcp", "azure", and "k3d".
        # For other environments, use an empty string "".
        cloudProvider: k3d
        # namespace defines the Kubernetes namespace for this region used to compute the --join flag.
        namespace: default
        # domain is the DNS domain of the region used for cross-region communication.
        # Other regions need to reach this region by connecting to <cluster-name>.<namespace>.svc.<domain>.
        # domain: ""
        #
        # encryptionAtRest contains all secret names and keys for Encryption At Rest.
        # encryptionAtRest:
          #
          # platform is the cloud platform whose KMS is used to gate the new Customer-Managed Encryption Key (CMEK).
          # Supported values are UNKNOWN_KEY_TYPE, AWS_KMS, and GCP_CLOUD_KMS.
          # platform: ""
          #
          # keySecretName is the name of the Kubernetes Secret containing the (new) store key.
          # If not set, this will be interpreted as "plain", i.e., unencrypted.
          # For the AWS_KMS platform, the secret should contain "StoreKeyData", "AuthPrincipal", "URI", "Region", "Type", and "ExternalID".
          # For the GCP_CLOUD_KMS platform, the secret should contain "StoreKeyData", "AuthPrincipal", "URI", "Region", and "Type".
          # For the UNKNOWN_KEY_TYPE platform, the secret should contain "StoreKeyData".
          # keySecretName: ""
          #
          # cmekCredentialsSecretName is the name of the Kubernetes Secret containing credentials that are needed to authenticate into the customer's KMS.
          # This value is required if platform is not UNKNOWN_KEY_TYPE.
          # For AWS_KMS platform, the secret should contain "aws_access_key_id" and "aws_secret_access_key".
          # For GCP_CLOUD_KMS platform, the secret should contain "gcp_service_account_key".
          # cmekCredentialsSecretName: ""
          #
          # oldKeySecretName is the name of the Kubernetes Secret containing the old store key.
          # If not set, this will be interpreted as "plain", i.e., unencrypted.
          # oldKeySecretName: ""
          #
    # walFailoverSpec captures the configuration for WAL Failover.
    walFailoverSpec: {}
      # status determines the possible values to WAL Failover configuration.
      # It has 3 possible values: "", "enable" and "disable".
      # status: ""
      #
      # size is side disk size to be used for WAL Failover.
      # size: "25Gi"
      #
      # storageClassName defines the StorageClass for the PVC.
      # If not set, the default provisioner will be chosen (gp2 on AWS, standard on GKE).
      # storageClassName: ""
      #
    # podLabels captures additional labels to apply to CockroachDB pods.
    podLabels:
      app.kubernetes.io/component: cockroachdb
    # flags captures flags passed to the CockroachDB container.
    flags:
      # Disables backup/restore to local disk by default.
      --external-io-dir: disabled
    # env captures environment variables set on CockroachDB pods.
    env: []
      # - name: APP_NAME
      #   value: "CRDB"
      # - name: POD_NAME
      #   valueFrom:
      #     fieldRef:
      #       fieldPath: metadata.name
    # rollingRestartDelay specifies the delay between rolling restarts of CockroachDB pods.
    rollingRestartDelay: 30s
    # topologySpreadConstraints captures pod topology spread constraints.
    # It is recommended to spread CockroachDB pods across zones to ensure high availability.
    topologySpreadConstraints:
        # maxSkew defines the degree to which the pods can be unevenly distributed.
      - maxSkew: 1
        # topologyKey defines the key for topology spread.
        topologyKey: topology.kubernetes.io/zone
        # whenUnsatisfiable defines the behavior when constraints cannot be met.
        whenUnsatisfiable: DoNotSchedule
    # service captures the Kubernetes Service configurations for CockroachDB pods.
    service:
      # ports captures the service port definitions.
      ports:
        # grpc captures the gRPC service port configuration.
        grpc:
          # port defines the gRPC port number.
          port: 26258
          # name defines the gRPC service name.
          name: grpc
        # sql captures the SQL service port configuration.
        sql:
          # port defines the SQL port number.
          port: 26257
          # name defines the SQL service name.
          name: sql
        # http captures the HTTP service port configuration.
        http:
          # port defines the HTTP port number.
          port: 8080
          # name defines the HTTP service name.
          name: http
      # public captures the public service configuration for client access.
      # It exposes a ClusterIP that will automatically load balance connections to the different database Pods.
      public:
        # type defines the service type for external access.
        type: ClusterIP
        # annotations captures additional annotations for the public service.
        annotations: {}
        # labels captures additional labels for the public service.
        labels:
          # app.kubernetes.io/component defines the component label for the public service.
          app.kubernetes.io/component: cockroachdb
    # podAnnotations captures annotations to apply to CockroachDB pods.
    podAnnotations: {}
    # terminationGracePeriod determines the time available to CockroachDB for graceful drain.
    # It follows the metav1.Duration format, e.g., "300s", "5m" or "1h".
    # terminationGracePeriod: "300s"
    # nodeSelector captures the node selector labels for scheduling pods.
    nodeSelector: {}
    # affinity captures scheduling affinity rules for CockroachDB pods.
    affinity:
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      # podAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     - labelSelector:
      #         matchExpressions:
      #           - key: security
      #             operator: In
      #             values:
      #               - S1
      #       topologyKey: topology.kubernetes.io/zone
      # podAntiAffinity:
      #   preferredDuringSchedulingIgnoredDuringExecution:
      #     - weight: 100
      #       podAffinityTerm:
      #         labelSelector:
      #           matchExpressions:
      #             - key: security
      #               operator: In
      #               values:
      #                 - S2
      #         topologyKey: topology.kubernetes.io/zone
      #
    # sideCars captures the configuration for sidecar containers.
    sideCars:
      # initContainers captures init containers for CockroachDB pods.
      initContainers: []
      # containers captures additional containers for CockroachDB pods.
      containers: []
      # volumes captures additional volumes for CockroachDB pods.
      volumes: []
    # tolerations captures the tolerations for scheduling CockroachDB pods.
    tolerations: []
    # localityLabels captures labels used to determine node locality.
    # It is an ordered, comma-separated list of keys that which must be present as labels on the nodes.
    # For region and zone to be part of the locality, the labels (topology.kubernetes.io/region, topology.kubernetes.io/region) must be set on the nodes.
    # For other labels, they must be set on the nodes and will be presented as key/value pairs to the node locality.
    # Example:
    # If localityLabels are provided as ["topology.kubernetes.io/region", "topology.kubernetes.io/zone", "example.datacenter.locality"], and the node labels are:
    #   topology.kubernetes.io/region: us-central1
    #   topology.kubernetes.io/zone: us-central1-c
    #   example.datacenter.locality: dc2
    # the resulting locality flag will be: locality=region=us-central1,zone=us-central1-c,example.datacenter.locality=dc2.
    # https://www.cockroachlabs.com/docs/v25.1/cockroach-start#locality
    localityLabels: []
    # loggingConfigMapName defines the ConfigMap which contains log configuration used to send the logs through the
    # proper channels within CockroachDB.
    # The value of the ConfigMap should be specified under the key logs.yaml.
    loggingConfigMapName: ""
    # godebug captures Go runtime debug settings for CockroachDB pods.
    godebug:
      # disablethp determines whether Transparent Huge Pages are disabled.
      # By default, disables THP, which can cause memory inefficiency for CockroachDB.
      disablethp: "1"
k8s:
  # nameOverride overrides the name of the chart. If not set, the chart name will be used.
  # For example, if the chart name is "cockroachdb" and nameOverride is set to "crdb",
  # the generated name would be "{release-name}-crdb" instead of "{release-name}-cockroachdb".
  nameOverride: ""
  # fullnameOverride overrides the name of the chart completely. If not set, the chart name will be used.
  # For example, if the chart name is "cockroachdb" and fullnameOverride is set to "crdb",
  # the generated name would be "crdb" instead of "{release-name}".
  # We truncate at 63 chars to adhere to Kubernetes naming conventions for some resources.
  fullnameOverride: ""
  # labels captures additional labels for all Kubernetes resources created by this chart.
  labels: {}
    # app.kubernetes.io/part-of: my-app
