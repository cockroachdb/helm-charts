apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
    app.kubernetes.io/component: init
    app.kubernetes.io/instance: cockroachdb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cockroachdb
    helm.sh/chart: cockroachdb-18.0.3
  name: cockroachdb-init
  namespace: default
spec:
  backoffLimit: 6
  completionMode: NonIndexed
  completions: 1
  manualSelector: false
  parallelism: 1
  podReplacementPolicy: TerminatingOrFailed
  selector:
    matchLabels:
      batch.kubernetes.io/controller-uid: 2450ae58-e73a-4c9e-9e42-84b6c0647359
  suspend: false
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: init
        app.kubernetes.io/instance: cockroachdb
        app.kubernetes.io/name: cockroachdb
        batch.kubernetes.io/controller-uid: 2450ae58-e73a-4c9e-9e42-84b6c0647359
        batch.kubernetes.io/job-name: cockroachdb-init
        controller-uid: 2450ae58-e73a-4c9e-9e42-84b6c0647359
        job-name: cockroachdb-init
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |-
          initCluster() {
            while true; do
              local output=$(
                set -x;

                /cockroach/cockroach init \
                  --certs-dir=/cockroach-certs/ \
                  --host=cockroachdb-0.cockroachdb:26257 \
                  --virtualized \
              2>&1);

              local exitCode="$?";
              echo $output;

              if [[ "$output" =~ .*"Cluster successfully initialized".* || "$output" =~ .*"cluster has already been initialized".* ]]; then
                break;
              fi

              echo "Cluster is not ready to be initialized, retrying in 5 seconds"
              sleep 5;
            done
          }
          initCluster;
        image: cockroachdb/cockroach:v25.3.2
        imagePullPolicy: IfNotPresent
        name: cluster-init
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /cockroach-certs/
          name: client-certs
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /bin/sh
        - -c
        - cp -f /certs/* /cockroach-certs/; chmod 0400 /cockroach-certs/*.key
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: busybox
        imagePullPolicy: IfNotPresent
        name: copy-certs
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /cockroach-certs/
          name: client-certs
        - mountPath: /certs/
          name: certs-secret
      restartPolicy: OnFailure
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: cockroachdb
      serviceAccountName: cockroachdb
      terminationGracePeriodSeconds: 300
      volumes:
      - emptyDir: {}
        name: client-certs
      - name: certs-secret
        projected:
          defaultMode: 420
          sources:
          - secret:
              items:
              - key: ca.crt
                mode: 256
                path: ca.crt
              - key: tls.crt
                mode: 256
                path: client.root.crt
              - key: tls.key
                mode: 256
                path: client.root.key
              name: cockroachdb-client-secret