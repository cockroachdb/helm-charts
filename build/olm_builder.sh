#!/bin/bash

set -euxo pipefail

CERTIFIED_OPERATOR=${CERTIFIED_OPERATOR:-"false"}
VERSION=$(cat version.txt)

SRC_DIR=$(pwd)

olmPath="${SRC_DIR}"/bundle
cockroachChart="${SRC_DIR}"/cockroachdb
stableCSV="${olmPath}"/manifests/cockroachdb.clusterserviceversion.yaml
bundleDockerfile="${SRC_DIR}"/build/docker-image/olm-catalog/bundle.Dockerfile
metaAnnotations="${olmPath}"/metadata/annotations.yaml

RELEASE_TAG=v"${VERSION}"
COCKROACH_TAG=v$(bin/yq '.appVersion' "${cockroachChart}"/Chart.yaml)
STABLE_CHANNEL=stable-v"$(cut -d'.' -f1 <<<"${VERSION}")".x

UNAME_S=$(uname -s)

function update_olm_operator() {
    valuesJSON=$(bin/yq -p yaml -o json "${cockroachChart}"/values.yaml | bin/jq tostring | sed 's/^.\(.*\).$/\1/')

    if [[ "${UNAME_S}" == "Linux" ]]; then
        sed -i 's|VALUES_PLACEHOLDER|'"${valuesJSON}"'|g' "${stableCSV}"

        sed -i 's|RELEASE_TAG|'"${RELEASE_TAG}"'|g' "${stableCSV}"

        sed -i 's|VERSION|'"${VERSION}"'|g' "${stableCSV}"

        sed -i 's|COCKROACH_TAG|'"${COCKROACH_TAG}"'|g' "${stableCSV}"

        sed -i 's|QUAY_DOCKER_REGISTRY|'"${QUAY_DOCKER_REGISTRY}"'|g' "${stableCSV}"

        sed -i 's|QUAY_PROJECT|'"${QUAY_PROJECT}"'|g' "${stableCSV}"

        sed -i 's|HELM_OPERATOR_IMAGE|'"${HELM_OPERATOR_IMAGE}"'|g' "${stableCSV}"

        sed -i 's|STABLE_CHANNEL|'"${STABLE_CHANNEL}"'|g' "${bundleDockerfile}"

        sed -i 's|STABLE_CHANNEL|'"${STABLE_CHANNEL}"'|g' "${metaAnnotations}"
    elif [[ "${UNAME_S}" == "Darwin" ]]; then
        sed -i '' 's|VALUES_PLACEHOLDER|'"${valuesJSON}"'|g' "${stableCSV}"

        sed -i '' 's|RELEASE_TAG|'"${RELEASE_TAG}"'|g' "${stableCSV}"

        sed -i '' 's|VERSION|'"${VERSION}"'|g' "${stableCSV}"

        sed -i '' 's|COCKROACH_TAG|'"${COCKROACH_TAG}"'|g' "${stableCSV}"

        sed -i '' 's|QUAY_DOCKER_REGISTRY|'"${QUAY_DOCKER_REGISTRY}"'|g' "${stableCSV}"

        sed -i '' 's|QUAY_PROJECT|'"${QUAY_PROJECT}"'|g' "${stableCSV}"

        sed -i '' 's|HELM_OPERATOR_IMAGE|'"${HELM_OPERATOR_IMAGE}"'|g' "${stableCSV}"

        sed -i '' 's|STABLE_CHANNEL|'"${STABLE_CHANNEL}"'|g' "${bundleDockerfile}"

        sed -i '' 's|STABLE_CHANNEL|'"${STABLE_CHANNEL}"'|g' "${metaAnnotations}"
    fi

}

function release_olm_operator() {
    echo "${QUAY_DOCKER_TOKEN}" | docker login --username="$QUAY_DOCKER_USERNAME" --password-stdin "${QUAY_DOCKER_REGISTRY}"
    trap remove_files_on_exit EXIT

    make build-and-push-operator-image

    make build-and-push-bundle-image
}

function release_opm_catalogSource() {
    bin/opm index add --generate --overwrite-latest --container-tool=docker --bundles="${QUAY_DOCKER_REGISTRY}"/"${QUAY_PROJECT}"/"${BUNDLE_IMAGE}":"${VERSION}" \
    --tag "${QUAY_DOCKER_REGISTRY}"/"${QUAY_PROJECT}"/"${OPERATOR_IMAGE}":"${VERSION}"

    docker buildx build --platform=linux/amd64,linux/arm64 \
    -t "${QUAY_DOCKER_REGISTRY}"/"${QUAY_PROJECT}"/"${OPERATOR_IMAGE}":"${VERSION}" --push -f index.Dockerfile .
}

function create_release_bundle_pr() {
    echo "${TOKEN}" | gh auth login --with-token

    local repo="https://github.com/redhat-openshift-ecosystem/certified-operators"

    if [[ "${1}" == "true" ]]
    then
        rm -rf certified-operators
        gh repo delete https://github.com/<CI_BOT>/certified-operators.git --confirm # TODO: Add CI GithubBot
        gh repo fork "${repo}" --clone
        cd certified-operators || exit
    else
        repo="https://github.com/k8s-operatorhub/community-operators"
        rm -rf community-operators
        gh repo delete https://github.com/<CI_BOT>/community-operators.git --confirm # TODO: Add CI GithubBot
        gh repo fork "${repo}" --clone
        cd community-operators || exit
    fi

    git fetch upstream
    git pull upstream main
    git checkout main
    git rebase upstream/main

    ## commit new operator
    cp -fR "${olmPath}" ./operators/cockroachdb/"${RELEASE_TAG}"

    if [[ "${1}" == "true" ]]
    then
        operator-manifest pin ./operators/cockroachdb/"${RELEASE_TAG}"/
    fi

    git add operators/cockroachdb/"${RELEASE_TAG}"
    git commit -m "cockroach release (${RELEASE_TAG})"
    git push https://"${GITHUB_USER}":"${TOKEN}"@github.com/<CI_BOT>/certified-operators.git # TODO: Add CI GithubBot
    gh pr create --title "operator cockroachdb (${RELEASE_VERSION})" --body "New operator bundle. Autogenerated PR" \
      --repo "${repo}" \
      --head "${GITHUB_USER}":main --base main
}

update_olm_operator
 # return from here if make target `prepare_bundle` is called
if [[ $# -ne 0 ]]; then
    exit 0
fi

release_olm_operator
release_opm_catalogSource

# TODO: Uncomment after manual flow is verified
# create_release_bundle_pr
# if [[ "${CERTIFIED_OPERATOR}" == "true" ]]
# then
#     create_release_bundle_pr "$CERTIFIED_OPERATOR"
# fi

remove_files_on_exit() {
  rm -rf ~/.docker
}
