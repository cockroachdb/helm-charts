# operator.yaml defines how the operator are installed in a K8s
# cluster, including its deployment and permissions.
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: cockroach-operator
value: 500000000

---
# Configure the permissions the operator will have in the K8s cluster.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: cockroach-operator-role
rules:
  # Namespace permissions should be dropped once this K8s bug is fixed.
  # https://github.com/kubernetes/kubernetes/issues/115819
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  # NOTE: The operator writes to events when there is leader election activity. It also writes autoscaler events which
  # seem to be requiring a patch permission.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterrolebindings
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - list
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/eviction
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - scheduling.k8s.io
    resources:
      - priorityclasses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  # The "create" verb cannot be qualified with resourceNames, so grant the
  # unqualified permission so that the operator can create a new webhook. But
  # only allow the operator to get and patch its own webhook.
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - create
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    resourceNames:
      - cockroach-webhook-config
    verbs:
      - get
      - patch
  # The "create" verb cannot be qualified with resourceNames, so grant the
  # unqualified permission so that the operator can create new CRDs. But only
  # allow the operator to get and patch its own CRDs.
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - list
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    resourceNames:
      - crdbclusters.crdb.cockroachlabs.com
      - crdbnodes.crdb.cockroachlabs.com
      - crdbtenants.crdb.cockroachlabs.com
    verbs:
      - get
      - patch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      - statefulsets
      - deployments
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/portforward
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbclusters
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbclusters/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbnodes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbnodes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbtenants
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - crdb.cockroachlabs.com
    resources:
      - crdbtenants/status
    verbs:
      - get
      - patch
      - update

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cockroach-operator-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: cockroach-operator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cockroach-operator-default
  labels:
    app: cockroach-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cockroach-operator-role
subjects:
  - name: cockroach-operator-default
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount

---
# Expose the operator's prometheus and grpc servers to the SQLProxy's TenantDir.
apiVersion: v1
kind: Service
metadata:
  name: cockroach-operator
  namespace: {{ .Release.Namespace }}
  labels:
    app: cockroach-operator
spec:
  ports:
    - name: grpc
      port: 9070
      targetPort: 9070
  selector:
    app: cockroach-operator
---
# Configure how the operator will be deployed in the K8s cluster.
# NOTE: Put this last, so that permissions have already been granted when it
# starts up.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cockroach-operator
  namespace: {{ .Release.Namespace }}
  labels:
    app: cockroach-operator
spec:
  replicas: {{ .Values.numReplicas }}
  selector:
    matchLabels:
      app: cockroach-operator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: cockroach-operator
    spec:
      shareProcessNamespace: true
      serviceAccountName: cockroach-operator-default
      priorityClassName: cockroach-operator
      containers:
        - name: cockroach-operator
          image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          args:
            # Pin metrics port so it can be properly exposed by the "ports"
            # field below even in the event of a change to the default value.
            - "-metrics-addr=0.0.0.0:8080"
            - "-rpc-addr=0.0.0.0:9070"
            - "-skip-tenant-controller=true"
            - "-disable-tenant-finalization=true"
          ports:
            # Expose port under specific name so that performance metrics can
            # more easily be scraped from container.
            - name: operator
              containerPort: 8080
            - name: grpc
              containerPort: 9070
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Expose K8s node name as environment variable. The operator will
            # use this to query the node and derive environmental information.
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 500m
              memory: 1000Mi
            limits:
              cpu: 2000m
              memory: 4000Mi
          volumeMounts:
            - name: certs
              mountPath: /certs
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9080
              scheme: HTTP
            # Give the operator 20 seconds to start. Then, only restart the
            # container if 3 consecutive probes fail over a period of 9 seconds.
            # Note that the operator starts up much faster than 20 seconds, but
            # restarting the container more frequently than once every ~30
            # seconds isn't useful.
            initialDelaySeconds: 20
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 3
          readinessProbe:
            httpGet:
              # To change this to be the default /readyz - enable /healthz and switch the liveness probes to it
              # on all clusters (done), change the readiness probe to use /healthz too and change the readiness
              # endpoint from /health to the default /readyz. Once all clusters are updated - change the
              # readiness probe to /readyz.
              path: /health
              port: 9080
              scheme: HTTP
            # Immediately start sending readiness probes. Stop sending traffic
            # if 3 consecutive probes fail over a period of 9 seconds, as the
            # container is probably overloaded or unhealthy, and it's best to
            # back off and let it recover.
            initialDelaySeconds: 0
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: certs
          secret:
            secretName: cockroach-operator-certs