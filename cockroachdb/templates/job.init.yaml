{{ $isMultinodeCluster := and (eq (len .Values.conf.join) 0) (not (index .Values.conf `single-node`)) }}
{{ $isDatabaseInitEnabled := .Values.init.database.enabled }}
{{- if or $isMultinodeCluster $isDatabaseInitEnabled }}
kind: Job
apiVersion: batch/v1
metadata:
  name: {{ template "cockroachdb.fullname" . }}-init
  namespace: {{ .Release.Namespace | quote }}
  labels:
    helm.sh/chart: {{ template "cockroachdb.chart" . }}
    app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
  {{- with .Values.init.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
      {{- with .Values.init.labels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.init.annotations }}
      annotations: {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
    {{- if or .Values.image.credentials (and .Values.tls.enabled .Values.tls.init.image.credentials (not .Values.tls.certs.provided)) }}
      imagePullSecrets:
      {{- if .Values.image.credentials }}
        - name: {{ template "cockroachdb.fullname" . }}.db.registry
      {{- end }}
      {{- if and .Values.tls.enabled .Values.tls.init.image.credentials (not .Values.tls.certs.provided) }}
        - name: {{ template "cockroachdb.fullname" . }}.init-certs.registry
      {{- end }}
    {{- end }}
    {{- if and .Values.tls.enabled (not .Values.tls.certs.provided)}}
      serviceAccountName: {{ template "cockroachdb.tls.serviceAccount.name" . }}
      initContainers:
        # The init-certs container sends a CSR (certificate signing request) to
        # the Kubernetes cluster.
        # You can see pending requests using:
        #   kubectl get csr
        # CSRs can be approved using:
        #   kubectl certificate approve <csr-name>
        #
        # In addition to the Node certificate and key, the init-certs entrypoint
        # will symlink the cluster CA to the certs directory.
        - name: init-certs
          image: "{{ .Values.tls.init.image.repository }}:{{ .Values.tls.init.image.tag }}"
          imagePullPolicy: {{ .Values.tls.init.image.pullPolicy | quote }}
          command:
            - /bin/ash
            - -ecx
            - >-
              /request-cert
              -namespace=${POD_NAMESPACE}
              -certs-dir=/cockroach-certs/
              -symlink-ca-from=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              -type=client
              -user=root
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs/
    {{- end }}
    {{- with .Values.init.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.init.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.init.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
      containers:
        - name: cluster-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          # TODO: COMMENT
          # Run the command in an `while true` loop because this Job is bound
          # to come up before the CockroachDB Pods (due to the time needed to
          # get PersistentVolumes attached to Nodes), and sleeping 5 seconds
          # between attempts is much better than letting the Pod fail when
          # the init command does and waiting out Kubernetes' non-configurable
          # exponential back-off for Pod restarts.
          # Command completes either when cluster initialization succeeds,
          # or when cluster has been initialized already.
          command:
          - /bin/bash
          - -c
          - >-
            {{- if $isMultinodeCluster }}
              initCluster() {
                while true; do
                  local output=$(
                    set -x;

                    /cockroach/cockroach init \
                      {{- if .Values.tls.enabled }}
                      --certs-dir=/cockroach-certs/ \
                      {{- else }}
                      --insecure \
                      {{- end }}
                      {{- with index .Values.conf "cluster-name" }}
                      --cluster-name={{.}} \
                      {{- end }}
                      --host={{ template "cockroachdb.fullname" . }}-0.{{ template "cockroachdb.fullname" . -}}
                              :{{ .Values.service.ports.grpc.internal.port | int64 }}
                  2>&1);

                  local returnCode="$?";
                  echo $output;

                  if [[ "$returnCode" == "0" || "$output" == *"cluster has already been initialized"* ]]
                    then break;
                  fi

                  sleep 5;
                done
              }

              initCluster;
            {{- end }}

            {{- if $isDatabaseInitEnabled }}
              initDatabases() {
                while true; do
                  local output=$(
                    set -x;

                    /cockroach/cockroach sql \
                      {{- if .Values.tls.enabled }}
                      --certs-dir=/cockroach-certs/ \
                      {{- else }}
                      --insecure \
                      {{- end }}
                      {{- with index .Values.conf "cluster-name" }}
                      --cluster-name={{.}} \
                      {{- end }}
                      --host={{ template "cockroachdb.fullname" . }}-0.{{ template "cockroachdb.fullname" . -}}
                              :{{ .Values.service.ports.grpc.internal.port | int64 }} \
                      --execute="
                        {{- if .Values.init.database.organization }}
                          SET CLUSTER SETTING cluster.organization = '{{ .Values.init.database.organization }}';
                        {{- end }}

                        {{- if .Values.init.database.license }}
                          SET CLUSTER SETTING enterprise.license = '{{ .Values.init.database.license }}';
                        {{- end }}

                        {{- range $user := .Values.init.database.users }}
                          CREATE USER IF NOT EXISTS {{ $user.name }} WITH
                          {{- if $user.password }}
                            PASSWORD '{{ $user.password }}'
                          {{- else }}
                            PASSWORD null
                          {{- end }}
                            {{ join " " $user.options }}
                          ;
                        {{- end }}

                        {{- range $database := .Values.init.database.databases }}
                          CREATE DATABASE IF NOT EXISTS {{ $database.name }}
                            {{- if $database.options }}
                              {{ join " " $database.options }}
                            {{- end }}
                          ;

                        {{- range $owner := $database.owners }}
                          GRANT ALL ON DATABASE {{ $database.name }} TO {{ $owner }};
                        {{- end }}

                        {{- if $database.backup }}
                          CREATE SCHEDULE {{ $database.name }}_scheduled_backup
                            FOR BACKUP DATABASE {{ $database.name }} INTO '{{ $database.backup.into }}'

                          {{- if $database.backup.options }}
                            WITH {{ join "," $database.backup.options }}
                          {{- end }}
                            RECURRING '{{ $database.backup.recurring }}' FULL BACKUP ALWAYS

                          {{- if and $database.backup.schedule $database.backup.schedule.options }}
                            WITH SCHEDULE OPTIONS {{ join "," $database.backup.schedule.options }}
                          {{- end }}
                          ;
                        {{- end }}
                        {{- end }}

                        SELECT 'Provisioning completed successfully';
                      "
                    2>&1);

                  local returnCode="$?";
                  echo $output;

                  if [[ "$returnCode" == "0" || "$output" == *"Provisioning completed successfully"* ]]
                    then break;
                  fi

                  sleep 5;
                done
              }

              initDatabases;
            {{- end }}
        {{- if .Values.tls.enabled }}
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs/
        {{- end }}
        {{- with .Values.init.resources }}
          resources: {{- toYaml . | nindent 12 }}
        {{- end }}
    {{- if .Values.tls.enabled }}
      volumes:
        - name: client-certs
          {{- if .Values.tls.certs.provided }}
          {{- if .Values.tls.certs.tlsSecret }}
          projected:
            sources:
            - secret:
                name: {{ .Values.tls.certs.clientRootSecret }}
                items:
                - key: ca.crt
                  path: ca.crt
                  mode: 0400
                - key: tls.crt
                  path: client.root.crt
                  mode: 0400
                - key: tls.key
                  path: client.root.key
                  mode: 0400
          {{- else }}
          secret:
            secretName: {{ .Values.tls.certs.clientRootSecret }}
            defaultMode: 0400
          {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
    {{- end }}
{{- end }}
